import numpy as np
import scipy.linalg
import scipy
import matplotlib.pyplot as plt
# Define the degree of the polynomial
d = 5
# Define the interval
a = -1
b = 1
# Define the number of points
N = 20
# Define the data points
x = np.linspace(a, b, N)
y = np.sin(x)
# Define the Vandermonde matrix
A = np.vander(x, d + 1)
# Define the vector of data points
y = y.reshape(N, 1)
# QR decomposition of the matrix A^{T}A
Q, R = np.linalg.qr(A.T @ A)
# Solve the normal equations
c1 = np.linalg.solve(R, Q.T @ A.T @ y)
# Solve the normal equations
c2 = np.linalg.solve(A.T @ A, A.T @ y)
# plot both solutions
# plot original data
plt.plot(x, y, 'o', label='Original data', markersize=10)
# plot the polynomial with QR
plt.plot(x, np.polyval(c1[::-1], x), label='Polynomial with QR')
# plot the polynomial with normal equations
plt.plot(x, np.polyval(c2[::-1], x), label='Polynomial with normal equations')
plt.legend()
plt.show()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
import numpy as np
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(reticulate)
knitr::knit_engines$set(python = reticulate::eng_python)
reticulate::repl_python()
